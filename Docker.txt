!! DOCKER !!

You can install docker on Windows, Mac, Linux

Note : For Windows User
**If you have operating system with version -> Windows 10 Pro, then you can directly install docker desktop 
**If you don't have Windows 10 Pro, then you must install docker-toolbox to run docker on your machine

=== Commands ===

>docker version
To get the version of docker, which is installed in our system
--------------------------------------------------------
>docker pull busybox
It will pull *busybox* image from docker-hub
--------------------------------------------------------
>docker run busybox
It will check whether it have busybox image in their local image repository, if it does not have this
the it will go to docker-hub and pull that image to our local image repository and then run that, it 
happens only once if the image is not their in our local image repository
---------------------------------------------------------
>docker ps
To see all running the container
----------------------------------------------------------
>docker ps --all or docker ps -a
To see all the container
----------------------------------------------------------
>docker ps --all
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
efc10b902596        mongo               "docker-entrypoint.sâ€¦"   9 minutes ago       Up 9 minutes                27017/tcp           tender_grothendieck
----------------------------------------------------------
Start Contianer
If I want to run the mongo container then I need to get the container id, and run the start command which 
is shown below
	>docker start efc10b902596
----------------------------------------------------------
Stop Container
If I want to stop the mongo container then I need to get the container id, and run the stop command which 
is shown below
	>docker stop efc10b902596
-----------------------------------------------------------
>docker exect -it <container_id>   -> docker exec -it efc10b902596 bash
Here *exec* is to execute, *-it* interactive mode. i.e to interact with container image.
[-i] -  it is for input and output command,
[-t] -  for terminal, like tty
Result -> It will open the contaiener in bash mode for interaction in our case we are interacting with mongo

we get such type of bash prompt
root@efc10b902596:/#

If we enter mongo in that, then will get below result

root@efc10b902596:/# mongo

----Start O/P----

MongoDB shell version v4.2.3
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("26f27cea-8748-436d-89cb-4de8dae81e2c") }
MongoDB server version: 4.2.3
Server has startup warnings:
2020-03-04T02:31:57.597+0000 I  STORAGE  [initandlisten]
2020-03-04T02:31:57.597+0000 I  STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2020-03-04T02:31:57.597+0000 I  STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2020-03-04T02:31:59.904+0000 I  CONTROL  [initandlisten]
2020-03-04T02:31:59.904+0000 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2020-03-04T02:31:59.904+0000 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2020-03-04T02:31:59.904+0000 I  CONTROL  [initandlisten]
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
----End O/P----
==============================
If we want to check dbs in mongodb then, in bash we need to add show dbs 
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
==============================
 |----------------------------------------------------------------------|
 | If we want to exit from bash / Interactive terminal of container **  |
 |  **ctrl + d** 														|
 |----------------------------------------------------------------------|
 
----------------------------------------------------------------------------
 
Difference in docker stop and docker kill
> docker stop <container_id>
It will execute the ongoing process and then stop the container or we can say that after completion
of current executing work it can stop the container

> docke kill <container_id>
It will kill/stop the container without waiting for completion of ongoing process.

-----------------------------------------------------------------------------

Multiple ways to get into container

1] docker exec -it  efc10b902596 bash - In this  case we need to start the container first (if it is not yet running) and then need to execute this command to enter in that container

2] docker run -it mongo bash  - You don't need to start container here, This command will start your container as well as it will enter in container as well


--------------------------------------------------------------------------------

=== Create Your Own Image === 

we can going to create mymongo image

first create folder > mkdir mymongo
Go to that folder > mymongo -> and then create Dockerfile

Here understand that how to create container image

Dockerfile -- It is processed by  --> Docker client --It will give futher to Docker Server and process the commands written in Docker file --After all the processing image is going to generate--> Custom Image
 
what to write inside the Dockerfile, hmmmm ??
so, lets start, prior to that understand first how to write comment in Dockerfile
using [ # ] symbol you can write the command.
e.g --> # step 1

Let's Start with create of Dockerfile
<!-- Docker File Start -->

# step 1
# First step is used os to interact with hardware, here we are using alpine
# alpine - It is minimal docker image which is based on Alpine Linux 
FROM alpine


# step 2
# Install a software
# apk - It is like [ apt get ]
# binutils - is nothing but program
# It is like we are going to the alpine environment and adding binutils program
RUN apk add binutils

<!-- Docker File End -->

Now create docker image

Go to mymongo folder $mymongo >
do the ls command to check Dockerfile is present or not $mymongo > ls

then run docker build command, and see the result 

$mymongo > docker build .
Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM alpine
latest: Pulling from library/alpine
c9b1b535fdd9: Pulling fs layer
c9b1b535fdd9: Verifying Checksum
c9b1b535fdd9: Download complete
c9b1b535fdd9: Pull complete
Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d
Status: Downloaded newer image for alpine:latest
 ---> e7d92cdc71fe
Step 2/2 : RUN apk add binutils
 ---> Running in 73907c905946
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz
(1/3) Installing libgcc (9.2.0-r3)
(2/3) Installing libstdc++ (9.2.0-r3)
(3/3) Installing binutils (2.33.1-r0)
Executing busybox-1.31.1-r9.trigger
OK: 17 MiB in 17 packages
Removing intermediate container 73907c905946
 ---> e3aec4897168
Successfully built e3aec4897168

--------------------------------------------------------------------------





